import asyncio
import logging
import os
import re
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

from hr_bot.utils.logger_config import setup_logging
from hr_bot.db.models import SessionLocal, Candidate, NotificationQueue
from hr_bot.tg_bot.middlewares import DbSessionMiddleware
from hr_bot.tg_bot.handlers import main_router
from hr_bot.utils.formatters import mask_fio

logger = logging.getLogger(__name__)


def escape_markdown(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram Markdown (—Å—Ç–∞—Ä—ã–π —Å—Ç–∏–ª—å).
    """
    if not isinstance(text, str):
        text = str(text)
    
    escape_chars = r'_*`['
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)


async def check_and_send_notifications(bot: Bot):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—á–µ—Ä–µ–¥—å –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 
    –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç.
    """
    db_session = SessionLocal()
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ GROUP_CHAT_ID –≤ –≤–∞—à .env —Ñ–∞–π–ª
    try:
        # ID —á–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (—Ü–µ–ª—ã–º)
        group_chat_id = int(os.getenv("GROUP_CHAT_ID"))
    except (TypeError, ValueError):
        logger.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GROUP_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.")
        return # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ ID –Ω–µ –∑–∞–¥–∞–Ω

    logger.info(f"–§–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω. –û—Ç–ø—Ä–∞–≤–∫–∞ –±—É–¥–µ—Ç –≤ —á–∞—Ç: {group_chat_id}")
    
    while True:
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ ---
        db_session = SessionLocal()
        try:
            tasks = db_session.query(NotificationQueue).filter_by(status='pending').limit(10).all()
            if not tasks:
                # –ü–∞—É–∑–∞, –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á
                await asyncio.sleep(10)
                continue

            logger.info(f"[Notification Sender] –ù–∞–π–¥–µ–Ω–æ {len(tasks)} –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")

            for task in tasks:
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–æ–π –∂–µ —Å–µ—Å—Å–∏–∏
                candidate = db_session.query(Candidate).filter_by(id=task.candidate_id).first()
                if not candidate or not candidate.dialogues:
                    task.status = 'error'
                    logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç –∏–ª–∏ –µ–≥–æ –¥–∏–∞–ª–æ–≥ –¥–ª—è –∑–∞–¥–∞—á–∏ {task.id}.")
                    db_session.commit() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É
                    continue
                
                dialogue = candidate.dialogues[0]
                vacancy = dialogue.vacancy
                
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
                safe_vacancy_title = escape_markdown(vacancy.title)
                safe_masked_name = escape_markdown(mask_fio(candidate.full_name))
                safe_age = escape_markdown(candidate.age or '–ù–µ —É–∫–∞–∑–∞–Ω')
                safe_citizenship = escape_markdown(candidate.citizenship or '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                safe_readiness = escape_markdown(candidate.readiness_to_start or '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                safe_city = escape_markdown(candidate.city or '–ù–µ —É–∫–∞–∑–∞–Ω') 
                safe_phone_number = escape_markdown(candidate.phone_number or "‚Äî")

                # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–ª—è Markdown —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_text = (
                    f"üìå *–ù–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏:* {safe_vacancy_title}\n"
                    f"*–§–ò–û:* {safe_masked_name}\n"
                    f"*–í–æ–∑—Ä–∞—Å—Ç:* {safe_age}\n"
                    f"*–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:* {safe_citizenship}\n"
                    f"*–ì–æ—Ç–æ–≤ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å:* {safe_readiness}\n"
                    f"*–ì–æ—Ä–æ–¥:* {safe_city}\n"
                    f"*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {safe_phone_number}\n"
                    f"*–°—Ç–∞—Ç—É—Å:* ‚úÖ –ü—Ä–æ—à—ë–ª –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é"
                )
                
                try:
                    await bot.send_message(chat_id=group_chat_id, text=message_text)
                    task.status = 'sent'
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—É {candidate.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                
                except Exception as e:
                    task.status = 'error'
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞—á–µ {task.id}: {e}")
                
                finally:
                    db_session.commit() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—á–∫–∏ –∑–∞–¥–∞—á
            await asyncio.sleep(5)

        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}", exc_info=True)
            db_session.rollback()
            await asyncio.sleep(30) # –ü–∞—É–∑–∞ –≤ —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
            
        finally:
            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é ---
            db_session.close()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    setup_logging(log_filename="telegram_bot.log")
    load_dotenv()
    
    bot = Bot(
        token=os.getenv("TELEGRAM_BOT_TOKEN"),
        default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
    )
    dp = Dispatcher()
    dp.update.middleware(DbSessionMiddleware(session_pool=SessionLocal))
    dp.include_router(main_router)
    
    logger.info("–£–ø—Ä–∞–≤–ª—è—é—â–∏–π Telegram-–±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    notification_task = asyncio.create_task(check_and_send_notifications(bot))
    
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)
    
    notification_task.cancel()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")