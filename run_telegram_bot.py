# run_telegram_bot.py

import asyncio
import logging
import os
import re # <-- –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

from hr_bot.utils.logger_config import setup_logging
from hr_bot.db.models import SessionLocal, TelegramUser, Candidate, NotificationQueue, Dialogue
from hr_bot.tg_bot.middlewares import DbSessionMiddleware
from hr_bot.tg_bot.handlers import main_router
from hr_bot.utils.formatters import mask_fio

logger = logging.getLogger(__name__)


# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –≠–ö–†–ê–ù–ò–†–û–í–ê–ù–ò–Ø ---
def escape_markdown(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram Markdown (—Å—Ç–∞—Ä—ã–π —Å—Ç–∏–ª—å).
    –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å —Ç–æ—á–∫–∞–º–∏, —Å–∫–æ–±–∫–∞–º–∏ –∏–ª–∏ –¥–µ—Ñ–∏—Å–∞–º–∏ –Ω–µ –ª–æ–º–∞–ª–∏ —Ä–∞–∑–º–µ—Ç–∫—É.
    """
    if not isinstance(text, str):
        text = str(text)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ —Å—Ç–∞—Ä–æ–º Markdown
    escape_chars = r'_*`['
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)


async def check_and_send_notifications(bot: Bot):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—á–µ—Ä–µ–¥—å –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞–º.
    """
    db_session = SessionLocal()
    logger.info("–§–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω.")
    while True:
        try:
            tasks = db_session.query(NotificationQueue).filter_by(status='pending').limit(10).all()
            if tasks:
                logger.info(f"[Notification Sender] –ù–∞–π–¥–µ–Ω–æ {len(tasks)} –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                recipients = db_session.query(TelegramUser).filter_by(role='user').all()

                if not recipients:
                    logger.warning("[Notification Sender] –í –ë–î –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–≤) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                    for task in tasks: task.status = 'error'
                    db_session.commit()
                    await asyncio.sleep(60)
                    continue

                for task in tasks:
                    candidate = db_session.query(Candidate).filter_by(id=task.candidate_id).first()
                    if not candidate or not candidate.dialogues:
                        task.status = 'error'
                        db_session.commit()
                        logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç –∏–ª–∏ –µ–≥–æ –¥–∏–∞–ª–æ–≥ –¥–ª—è –∑–∞–¥–∞—á–∏ {task.id}.")
                        continue
                    
                    dialogue = candidate.dialogues[0]
                    vacancy = dialogue.vacancy
                    
                    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
                    safe_vacancy_title = escape_markdown(vacancy.title)
                    safe_masked_name = escape_markdown(mask_fio(candidate.full_name))
                    safe_age = escape_markdown(candidate.age or '–ù–µ —É–∫–∞–∑–∞–Ω')
                    safe_citizenship = escape_markdown(candidate.citizenship or '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                    safe_city = escape_markdown(candidate.city or '–ù–µ —É–∫–∞–∑–∞–Ω') 
                    # --- –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–û–ï –ü–û–õ–ï ---
                    safe_readiness = escape_markdown(candidate.readiness_to_start or '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                    # -----------------------------
                    safe_phone_number = escape_markdown(candidate.phone_number or "‚Äî")

                    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–ª—è Markdown —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message_text = (
                        f"üìå *–ù–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏:* {safe_vacancy_title}\n"
                        f"*–§–ò–û:* {safe_masked_name}\n"
                        f"*–í–æ–∑—Ä–∞—Å—Ç:* {safe_age}\n"
                        f"*–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:* {safe_citizenship}\n"
                        # --- –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–£–Æ –°–¢–†–û–ö–£ –í –®–ê–ë–õ–û–ù ---
                        f"*–ì–æ—Ç–æ–≤ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å:* {safe_readiness}\n"
                        # --------------------------------------
                        f"*–ì–æ—Ä–æ–¥:* {safe_city}\n"
                        f"*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {safe_phone_number}\n"
                        f"*–°—Ç–∞—Ç—É—Å:* ‚úÖ –ü—Ä–æ—à—ë–ª –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é"
                    )
                    
                    sent_count = 0
                    for user in recipients:
                        try:
                            # parse_mode —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ bot
                            await bot.send_message(chat_id=user.telegram_id, text=message_text)
                            sent_count += 1
                        except Exception as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞—á–µ {task.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                    
                    task.status = 'sent'
                    db_session.commit()
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—É {candidate.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
            
            await asyncio.sleep(10)
        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}", exc_info=True)
            db_session.rollback()
            await asyncio.sleep(30)
    db_session.close()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    setup_logging(log_filename="telegram_bot.log")
    load_dotenv()
    
    bot = Bot(
        token=os.getenv("TELEGRAM_BOT_TOKEN"),
        default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN) # –û—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—à —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    )
    dp = Dispatcher()
    dp.update.middleware(DbSessionMiddleware(session_pool=SessionLocal))
    dp.include_router(main_router)
    
    logger.info("–£–ø—Ä–∞–≤–ª—è—é—â–∏–π Telegram-–±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    notification_task = asyncio.create_task(check_and_send_notifications(bot))
    
    await bot.delete_webhook(drop_pending_updates=True)
    # bot.delete_my_commands() # –£–±—Ä–∞–ª, —Ç.–∫. –∫–æ–º–∞–Ω–¥—ã –æ–±—ã—á–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ
    
    await dp.start_polling(bot)
    
    notification_task.cancel()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")