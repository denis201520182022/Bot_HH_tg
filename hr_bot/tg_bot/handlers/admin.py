# hr_bot/tg_bot/handlers/admin.py

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import Session
from hr_bot.db.models import TelegramUser, TrackedVacancy, TrackedRecruiter
from hr_bot.tg_bot.filters import AdminFilter
from hr_bot.tg_bot.keyboards import create_management_keyboard, role_choice_keyboard, cancel_fsm_keyboard

logger = logging.getLogger(__name__)
router = Router()
router.message.filter(AdminFilter()) # –ó–∞—â–∏—â–∞–µ–º –≤—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ

# --- FSM –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class UserManagement(StatesGroup):
    add_id = State()
    add_name = State()
    add_role = State()
    del_id = State()

class VacancyManagement(StatesGroup):
    add_id = State()
    add_title = State()
    del_id = State()

class RecruiterManagement(StatesGroup):
    add_id = State()
    add_name = State()
    del_id = State()

# --- –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã (–∫–æ–º–∞–Ω–¥–∞ + –∫–Ω–æ–ø–∫–∞) ---
@router.message(Command("cancel"))
async def cancel_command_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–æ–π.")
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@router.callback_query(F.data == "cancel_fsm")
async def cancel_callback_handler(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.", show_alert=True)
        return
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π.")
    await state.clear()
    await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()

# --- 1. –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ---

@router.message(F.text == "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def user_management_menu(message: Message, db_session: Session):
    users = db_session.query(TelegramUser).all()
    user_list = "\n".join([f"- *{u.username}* (ID: `{u.telegram_id}`) - _{u.role}_" for u in users])
    if not user_list:
        user_list = "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    await message.answer(
        f"üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n{user_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_management_keyboard([], "add_user", "del_user")
    )

@router.callback_query(F.data == "add_user")
async def start_add_user(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserManagement.add_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=cancel_fsm_keyboard)
    await callback.answer()

@router.message(UserManagement.add_id)
async def process_add_user_id(message: Message, state: FSMContext, db_session: Session):
    if not message.text or not message.text.isdigit():
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=cancel_fsm_keyboard)
        return
    user_id = message.text
    if db_session.query(TelegramUser).filter_by(telegram_id=user_id).first():
        await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        return
    await state.update_data(user_id=user_id)
    await state.set_state(UserManagement.add_name)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, `–ò–≤–∞–Ω –†–µ–∫—Ä—É—Ç–µ—Ä`).", reply_markup=cancel_fsm_keyboard)

@router.message(UserManagement.add_name)
async def process_add_user_name(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=cancel_fsm_keyboard)
        return
    await state.update_data(user_name=message.text)
    await state.set_state(UserManagement.add_role)
    await message.answer("–ò–º—è –ø—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=role_choice_keyboard)

@router.callback_query(UserManagement.add_role)
async def process_add_user_role(callback: CallbackQuery, state: FSMContext, db_session: Session):
    role = "admin" if callback.data == "set_role_admin" else "user"
    user_data = await state.get_data()
    new_user = TelegramUser(telegram_id=user_data['user_id'], username=user_data['user_name'], role=role)
    db_session.add(new_user)
    db_session.commit()
    await state.clear()
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['user_id']} —Å —Ä–æ–ª—å—é {role}")
    await callback.message.edit_text(f"‚úÖ *–£—Å–ø–µ—Ö!* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *{user_data['user_name']}* –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é *{role}*.")

@router.callback_query(F.data == "del_user")
async def start_del_user(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserManagement.del_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=cancel_fsm_keyboard)
    await callback.answer()

@router.message(UserManagement.del_id)
async def process_del_user_id(message: Message, state: FSMContext, db_session: Session):
    if not message.text or not message.text.isdigit():
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=cancel_fsm_keyboard)
        return
    user_id_to_delete = message.text
    if str(message.from_user.id) == user_id_to_delete:
        await message.answer("ü§î –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        return
    user_to_delete = db_session.query(TelegramUser).filter_by(telegram_id=user_id_to_delete).first()
    if not user_to_delete:
        await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id_to_delete}` –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        return
    db_session.delete(user_to_delete)
    db_session.commit()
    await state.clear()
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_delete}")
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *{user_to_delete.username}* (ID: `{user_id_to_delete}`) –±—ã–ª —É–¥–∞–ª–µ–Ω.")

# --- 2. –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–ê–ö–ê–ù–°–ò–Ø–ú–ò ---

@router.message(F.text == "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏")
async def vacancy_management_menu(message: Message, db_session: Session):
    vacancies = db_session.query(TrackedVacancy).all()
    vacancy_list = "\n".join([f"- *{v.title}* (ID: `{v.vacancy_id}`)" for v in vacancies])
    if not vacancy_list: vacancy_list = "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
    await message.answer(
        f"üìù *–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:*\n{vacancy_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_management_keyboard([], "add_vacancy", "del_vacancy")
    )

@router.callback_query(F.data == "add_vacancy")
async def start_add_vacancy(callback: CallbackQuery, state: FSMContext):
    await state.set_state(VacancyManagement.add_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –≤–∞–∫–∞–Ω—Å–∏–∏ —Å hh.ru –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.", reply_markup=cancel_fsm_keyboard)
    await callback.answer()

@router.message(VacancyManagement.add_id)
async def process_add_vacancy_id(message: Message, state: FSMContext, db_session: Session):
    if not message.text or not message.text.isdigit():
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=cancel_fsm_keyboard)
        return
    vacancy_id = message.text
    if db_session.query(TrackedVacancy).filter_by(vacancy_id=vacancy_id).first():
        await message.answer(f"‚ö†Ô∏è –í–∞–∫–∞–Ω—Å–∏—è —Å ID `{vacancy_id}` —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        return
    await state.update_data(vacancy_id=vacancy_id)
    await state.set_state(VacancyManagement.add_title)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ (–¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞).", reply_markup=cancel_fsm_keyboard)

@router.message(VacancyManagement.add_title)
async def process_add_vacancy_title(message: Message, state: FSMContext, db_session: Session):
    if not message.text:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=cancel_fsm_keyboard)
        return
    data = await state.get_data()
    vacancy_id = data['vacancy_id']
    title = message.text
    new_vacancy = TrackedVacancy(vacancy_id=vacancy_id, title=title)
    db_session.add(new_vacancy)
    db_session.commit()
    await state.clear()
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –¥–æ–±–∞–≤–∏–ª –≤–∞–∫–∞–Ω—Å–∏—é {title} ({vacancy_id})")
    await message.answer(f"‚úÖ –í–∞–∫–∞–Ω—Å–∏—è *{title}* (ID: `{vacancy_id}`) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫.")

@router.callback_query(F.data == "del_vacancy")
async def start_del_vacancy(callback: CallbackQuery, state: FSMContext):
    await state.set_state(VacancyManagement.del_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=cancel_fsm_keyboard)
    await callback.answer()

@router.message(VacancyManagement.del_id)
async def process_del_vacancy_id(message: Message, state: FSMContext, db_session: Session):
    if not message.text or not message.text.isdigit():
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=cancel_fsm_keyboard)
        return
    vacancy_id = message.text
    vacancy_to_delete = db_session.query(TrackedVacancy).filter_by(vacancy_id=vacancy_id).first()
    if not vacancy_to_delete:
        await message.answer(f"‚ö†Ô∏è –í–∞–∫–∞–Ω—Å–∏—è —Å ID `{vacancy_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        return
    db_session.delete(vacancy_to_delete)
    db_session.commit()
    await state.clear()
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} —É–¥–∞–ª–∏–ª –≤–∞–∫–∞–Ω—Å–∏—é {vacancy_id}")
    await message.answer(f"‚úÖ –í–∞–∫–∞–Ω—Å–∏—è *{vacancy_to_delete.title}* (ID: `{vacancy_id}`) —É–¥–∞–ª–µ–Ω–∞.")

# --- 3. –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ö–†–£–¢–ï–†–ê–ú–ò ---

@router.message(F.text == "üë®‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞–º–∏")
async def recruiter_management_menu(message: Message, db_session: Session):
    recruiters = db_session.query(TrackedRecruiter).all()
    recruiter_list = "\n".join([f"- *{r.name}* (ID: `{r.recruiter_id}`)" for r in recruiters])
    if not recruiter_list: recruiter_list = "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
    await message.answer(
        f"üë®‚Äçüíº *–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ä–µ–∫—Ä—É—Ç–µ—Ä—ã:*\n{recruiter_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_management_keyboard([], "add_recruiter", "del_recruiter")
    )

@router.callback_query(F.data == "add_recruiter")
async def start_add_recruiter(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RecruiterManagement.add_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ —Å hh.ru –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.", reply_markup=cancel_fsm_keyboard)
    await callback.answer()

@router.message(RecruiterManagement.add_id)
async def process_add_recruiter_id(message: Message, state: FSMContext, db_session: Session):
    if not message.text or not message.text.isdigit():
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=cancel_fsm_keyboard)
        return
    recruiter_id = message.text
    if db_session.query(TrackedRecruiter).filter_by(recruiter_id=recruiter_id).first():
        await message.answer(f"‚ö†Ô∏è –†–µ–∫—Ä—É—Ç–µ—Ä —Å ID `{recruiter_id}` —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        return
    await state.update_data(recruiter_id=recruiter_id)
    await state.set_state(RecruiterManagement.add_name)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ (–¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞).", reply_markup=cancel_fsm_keyboard)

@router.message(RecruiterManagement.add_name)
async def process_add_recruiter_name(message: Message, state: FSMContext, db_session: Session):
    if not message.text:
        await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=cancel_fsm_keyboard)
        return
    data = await state.get_data()
    recruiter_id = data['recruiter_id']
    name = message.text
    new_recruiter = TrackedRecruiter(recruiter_id=recruiter_id, name=name)
    db_session.add(new_recruiter)
    db_session.commit()
    await state.clear()
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –¥–æ–±–∞–≤–∏–ª —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ {name} ({recruiter_id})")
    await message.answer(f"‚úÖ –†–µ–∫—Ä—É—Ç–µ—Ä *{name}* (ID: `{recruiter_id}`) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.")

@router.callback_query(F.data == "del_recruiter")
async def start_del_recruiter(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RecruiterManagement.del_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=cancel_fsm_keyboard)
    await callback.answer()

@router.message(RecruiterManagement.del_id)
async def process_del_recruiter_id(message: Message, state: FSMContext, db_session: Session):
    if not message.text or not message.text.isdigit():
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=cancel_fsm_keyboard)
        return
    recruiter_id = message.text
    recruiter_to_delete = db_session.query(TrackedRecruiter).filter_by(recruiter_id=recruiter_id).first()
    if not recruiter_to_delete:
        await message.answer(f"‚ö†Ô∏è –†–µ–∫—Ä—É—Ç–µ—Ä —Å ID `{recruiter_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        return
    db_session.delete(recruiter_to_delete)
    db_session.commit()
    await state.clear()
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} —É–¥–∞–ª–∏–ª —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ {recruiter_id}")
    await message.answer(f"‚úÖ –†–µ–∫—Ä—É—Ç–µ—Ä *{recruiter_to_delete.name}* (ID: `{recruiter_id}`) —É–¥–∞–ª–µ–Ω.")