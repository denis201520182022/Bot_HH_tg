import logging
import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import Session
from aiogram.utils.formatting import Text, Bold, Italic, Code

from hr_bot.db.models import TelegramUser, TrackedRecruiter, AppSettings
# –£–±—Ä–∞–ª–∏ –∏–º–ø–æ—Ä—Ç TrackedVacancy, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
from hr_bot.tg_bot.filters import AdminFilter
from hr_bot.tg_bot.keyboards import (
    create_management_keyboard,
    role_choice_keyboard,
    cancel_fsm_keyboard,
    limits_menu_keyboard,
    limit_options_keyboard,
    admin_keyboard
)

logger = logging.getLogger(__name__)
router = Router()
router.message.filter(AdminFilter())

# --- FSM –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class UserManagement(StatesGroup):
    add_id = State(); add_name = State(); add_role = State(); del_id = State()

# --- –ö–õ–ê–°–° VacancyManagement –£–î–ê–õ–ï–ù ---

class RecruiterManagement(StatesGroup):
    add_id = State(); add_name = State(); add_refresh_token = State()
    add_access_token = State(); add_expires_in = State(); del_id = State()

class SettingsManagement(StatesGroup):
    set_limit = State(); set_tariff = State()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–º–µ–Ω—ã ---
@router.message(Command("cancel"))
async def cancel_command_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_keyboard)

@router.callback_query(F.data == "cancel_fsm")
async def cancel_callback_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –õ–ò–ú–ò–¢–ê–ú–ò –ò –¢–ê–†–ò–§–ê–ú–ò ---
@router.message(F.text == "‚öôÔ∏è –õ–∏–º–∏—Ç—ã –∏ –¢–∞—Ä–∏—Ñ")
async def limits_menu(message: Message, db_session: Session):
    settings = db_session.query(AppSettings).filter_by(id=1).first()
    if not settings:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return
    remaining = settings.limit_total - settings.limit_used
    cost = settings.limit_used * settings.cost_per_response
    content = Text(
        Bold("üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:"), "\n\n",
        "–õ–∏–º–∏—Ç: ", Bold(settings.limit_total), " –æ—Ç–∫–ª–∏–∫–æ–≤\n",
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ", Bold(settings.limit_used), " (–Ω–∞ —Å—É–º–º—É: ", Bold(f"{cost:.2f}"), " —Ä—É–±.)\n",
        "–û—Å—Ç–∞–ª–æ—Å—å: ", Bold(remaining), "\n\n",
        "–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: ", Bold(f"{settings.cost_per_response:.2f}"), " —Ä—É–±. –∑–∞ –æ—Ç–∫–ª–∏–∫"
    )
    await message.answer(**content.as_kwargs(), reply_markup=limits_menu_keyboard)

@router.callback_query(F.data == "set_limit")
async def start_set_limit(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SettingsManagement.set_limit)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=limit_options_keyboard)
    await callback.answer()

@router.message(SettingsManagement.set_limit)
async def process_set_limit(message: Message, state: FSMContext, db_session: Session):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_keyboard)
        return
    if not message.text or not message.text.isdigit() or int(message.text) < 0:
        await message.answer("‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    new_limit = int(message.text)
    settings = db_session.query(AppSettings).filter_by(id=1).first()
    settings.limit_total = new_limit
    if (settings.limit_total - settings.limit_used) >= 15:
        settings.low_limit_notified = False
    db_session.commit()
    await state.clear()
    content = Text("‚úÖ –ù–æ–≤—ã–π –ª–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ", Bold(new_limit), " –æ—Ç–∫–ª–∏–∫–æ–≤.")
    await message.answer(**content.as_kwargs(), reply_markup=admin_keyboard)

@router.callback_query(F.data == "set_tariff")
async def start_set_tariff(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SettingsManagement.set_tariff)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞ –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: `150.50`).", reply_markup=ReplyKeyboardRemove())
    await callback.answer()

@router.message(SettingsManagement.set_tariff)
async def process_set_tariff(message: Message, state: FSMContext, db_session: Session):
    try:
        new_tariff = float(message.text.replace(',', '.'))
        if new_tariff < 0: raise ValueError
    except (ValueError, TypeError):
        await message.answer("‚ùå –¢–∞—Ä–∏—Ñ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    settings = db_session.query(AppSettings).filter_by(id=1).first()
    settings.cost_per_response = new_tariff
    db_session.commit()
    await state.clear()
    content = Text("‚úÖ –ù–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ", Bold(f"{new_tariff:.2f}"), " —Ä—É–±. –∑–∞ –æ—Ç–∫–ª–∏–∫.")
    await message.answer(**content.as_kwargs(), reply_markup=admin_keyboard)

# --- 1. –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ---
@router.message(F.text == "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def user_management_menu(message: Message, db_session: Session):
    users = db_session.query(TelegramUser).all()
    content_parts = [Bold("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"), "\n\n"]
    if not users:
        content_parts.append(Italic("–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."))
    else:
        for u in users:
            role_emoji = "‚ú®" if u.role == 'admin' else "üßë‚Äçüíª"
            content_parts.extend([
                f"{role_emoji} ", Bold(u.username), " (ID: ", Code(u.telegram_id), ") - –†–æ–ª—å: ", Italic(u.role), "\n"
            ])
    content_parts.append("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    content = Text(*content_parts)
    await message.answer(**content.as_kwargs(), reply_markup=create_management_keyboard([], "add_user", "del_user"))

@router.callback_query(F.data == "add_user")
async def start_add_user(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserManagement.add_id)
    content = Text("–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    await callback.message.edit_text(**content.as_kwargs(), reply_markup=cancel_fsm_keyboard)
    await callback.answer()

@router.message(UserManagement.add_id)
async def process_add_user_id(message: Message, state: FSMContext, db_session: Session):
    if not message.text or not message.text.isdigit():
        content = Text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await message.answer(**content.as_kwargs(), reply_markup=cancel_fsm_keyboard)
        return
    user_id = message.text
    if db_session.query(TelegramUser).filter_by(telegram_id=user_id).first():
        content = Text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ", Code(user_id), " —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await message.answer(**content.as_kwargs())
        await state.clear()
        return
    await state.update_data(user_id=user_id)
    await state.set_state(UserManagement.add_name)
    content = Text("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, ", Code("–ò–≤–∞–Ω –†–µ–∫—Ä—É—Ç–µ—Ä"), ").")
    await message.answer(**content.as_kwargs(), reply_markup=cancel_fsm_keyboard)

@router.message(UserManagement.add_name)
async def process_add_user_name(message: Message, state: FSMContext):
    if not message.text:
        content = Text("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await message.answer(**content.as_kwargs(), reply_markup=cancel_fsm_keyboard)
        return
    await state.update_data(user_name=message.text)
    await state.set_state(UserManagement.add_role)
    await message.answer("–ò–º—è –ø—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=role_choice_keyboard)

@router.callback_query(UserManagement.add_role)
async def process_add_user_role(callback: CallbackQuery, state: FSMContext, db_session: Session):
    role = "admin" if callback.data == "set_role_admin" else "user"
    user_data = await state.get_data()
    new_user = TelegramUser(telegram_id=user_data['user_id'], username=user_data['user_name'], role=role)
    db_session.add(new_user)
    db_session.commit()
    await state.clear()
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['user_id']} —Å —Ä–æ–ª—å—é {role}")
    content = Text("‚úÖ ", Bold("–£—Å–ø–µ—Ö!"), " –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ", Bold(user_data['user_name']), " –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é ", Italic(role), ".")
    await callback.message.edit_text(**content.as_kwargs())

@router.callback_query(F.data == "del_user")
async def start_del_user(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserManagement.del_id)
    content = Text("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    await callback.message.edit_text(**content.as_kwargs(), reply_markup=cancel_fsm_keyboard)
    await callback.answer()

@router.message(UserManagement.del_id)
async def process_del_user_id(message: Message, state: FSMContext, db_session: Session):
    if not message.text or not message.text.isdigit():
        content = Text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await message.answer(**content.as_kwargs(), reply_markup=cancel_fsm_keyboard)
        return
    user_id_to_delete = message.text
    if str(message.from_user.id) == user_id_to_delete:
        await message.answer("ü§î –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        return
    user_to_delete = db_session.query(TelegramUser).filter_by(telegram_id=user_id_to_delete).first()
    if not user_to_delete:
        content = Text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ", Code(user_id_to_delete), " –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await message.answer(**content.as_kwargs())
        await state.clear()
        return
    deleted_username = user_to_delete.username
    deleted_id = user_to_delete.telegram_id
    db_session.delete(user_to_delete)
    db_session.commit()
    await state.clear()
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {deleted_id}")
    content = Text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ", Bold(deleted_username), " (ID: ", Code(deleted_id), ") –±—ã–ª —É–¥–∞–ª–µ–Ω.")
    await message.answer(**content.as_kwargs())

# --- –ë–õ–û–ö –£–ü–†–ê–í–õ–ï–ù–ò–Ø –í–ê–ö–ê–ù–°–ò–Ø–ú–ò –ü–û–õ–ù–û–°–¢–¨–Æ –£–î–ê–õ–ï–ù ---

# --- 3. –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ö–†–£–¢–ï–†–ê–ú–ò ---
@router.message(F.text == "üë®‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞–º–∏")
async def recruiter_management_menu(message: Message, db_session: Session):
    recruiters = db_session.query(TrackedRecruiter).all()
    
    content_parts = [Bold("üë®‚Äçüíº –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ä–µ–∫—Ä—É—Ç–µ—Ä—ã:"), "\n\n"]
    if not recruiters:
        content_parts.append(Italic("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."))
    else:
        for r in recruiters:
            content_parts.extend(["- ", Bold(r.name), " (ID: ", Code(r.recruiter_id), ")\n"])
    content_parts.append("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    
    content = Text(*content_parts)
    await message.answer(**content.as_kwargs(), reply_markup=create_management_keyboard([], "add_recruiter", "del_recruiter"))

@router.callback_query(F.data == "add_recruiter")
async def start_add_recruiter(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RecruiterManagement.add_id)
    content = Text("–®–∞–≥ 1/5: –í–≤–µ–¥–∏—Ç–µ ID —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ (manager id) —Å hh.ru.")
    await callback.message.edit_text(**content.as_kwargs(), reply_markup=cancel_fsm_keyboard)
    await callback.answer()

@router.message(RecruiterManagement.add_id)
async def process_add_recruiter_id(message: Message, state: FSMContext, db_session: Session):
    if not message.text or not message.text.isdigit():
        content = Text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await message.answer(**content.as_kwargs(), reply_markup=cancel_fsm_keyboard)
        return
    recruiter_id = message.text
    if db_session.query(TrackedRecruiter).filter_by(recruiter_id=recruiter_id).first():
        content = Text("‚ö†Ô∏è –†–µ–∫—Ä—É—Ç–µ—Ä —Å ID ", Code(recruiter_id), " —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await message.answer(**content.as_kwargs())
        await state.clear()
        return
    await state.update_data(recruiter_id=recruiter_id)
    await state.set_state(RecruiterManagement.add_name)
    content = Text("–®–∞–≥ 2/5: –û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ (–¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞).")
    await message.answer(**content.as_kwargs(), reply_markup=cancel_fsm_keyboard)

@router.message(RecruiterManagement.add_name)
async def process_add_recruiter_name(message: Message, state: FSMContext):
    if not message.text:
        content = Text("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await message.answer(**content.as_kwargs(), reply_markup=cancel_fsm_keyboard)
        return
    await state.update_data(name=message.text)
    await state.set_state(RecruiterManagement.add_refresh_token)
    content = Text("–®–∞–≥ 3/5: –ò–º—è –ø—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –≤—Å—Ç–∞–≤—å—Ç–µ REFRESH TOKEN, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç hh.ru.")
    await message.answer(**content.as_kwargs(), reply_markup=cancel_fsm_keyboard)

@router.message(RecruiterManagement.add_refresh_token)
async def process_add_refresh_token(message: Message, state: FSMContext):
    if not message.text:
        content = Text("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await message.answer(**content.as_kwargs(), reply_markup=cancel_fsm_keyboard)
        return
    await state.update_data(refresh_token=message.text)
    await state.set_state(RecruiterManagement.add_access_token)
    content = Text("–®–∞–≥ 4/5: Refresh token –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤—Å—Ç–∞–≤—å—Ç–µ ACCESS TOKEN.")
    await message.answer(**content.as_kwargs(), reply_markup=cancel_fsm_keyboard)

@router.message(RecruiterManagement.add_access_token)
async def process_add_access_token(message: Message, state: FSMContext):
    if not message.text:
        content = Text("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await message.answer(**content.as_kwargs(), reply_markup=cancel_fsm_keyboard)
        return
    await state.update_data(access_token=message.text)
    await state.set_state(RecruiterManagement.add_expires_in)
    content = Text("–®–∞–≥ 5/5: Access token –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –µ–≥–æ –∂–∏–∑–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (expires_in).")
    await message.answer(**content.as_kwargs(), reply_markup=cancel_fsm_keyboard)

@router.message(RecruiterManagement.add_expires_in)
async def process_add_expires_in(message: Message, state: FSMContext, db_session: Session):
    if not message.text or not message.text.isdigit():
        content = Text("‚ùå –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await message.answer(**content.as_kwargs(), reply_markup=cancel_fsm_keyboard)
        return
    
    expires_in = int(message.text)
    data = await state.get_data()
    expires_at = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(seconds=expires_in)
    
    new_recruiter = TrackedRecruiter(
        recruiter_id=data['recruiter_id'], name=data['name'],
        refresh_token=data['refresh_token'], access_token=data['access_token'],
        token_expires_at=expires_at
    )
    db_session.add(new_recruiter)
    db_session.commit()
    await state.clear()
    
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –¥–æ–±–∞–≤–∏–ª —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ {data['name']} ({data['recruiter_id']})")
    content = Text("‚úÖ ", Bold("–£—Å–ø–µ—Ö!"), " –†–µ–∫—Ä—É—Ç–µ—Ä ", Bold(data['name']), " –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
    await message.answer(**content.as_kwargs())

@router.callback_query(F.data == "del_recruiter")
async def start_del_recruiter(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RecruiterManagement.del_id)
    content = Text("–í–≤–µ–¥–∏—Ç–µ ID —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞.")
    await callback.message.edit_text(**content.as_kwargs(), reply_markup=cancel_fsm_keyboard)
    await callback.answer()

@router.message(RecruiterManagement.del_id)
async def process_del_recruiter_id(message: Message, state: FSMContext, db_session: Session):
    if not message.text or not message.text.isdigit():
        content = Text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await message.answer(**content.as_kwargs(), reply_markup=cancel_fsm_keyboard)
        return
    recruiter_id = message.text
    recruiter_to_delete = db_session.query(TrackedRecruiter).filter_by(recruiter_id=recruiter_id).first()
    if not recruiter_to_delete:
        content = Text("‚ö†Ô∏è –†–µ–∫—Ä—É—Ç–µ—Ä —Å ID ", Code(recruiter_id), " –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await message.answer(**content.as_kwargs())
        await state.clear()
        return
    
    deleted_name = recruiter_to_delete.name
    db_session.delete(recruiter_to_delete)
    db_session.commit()
    await state.clear()
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} —É–¥–∞–ª–∏–ª —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ {recruiter_id}")
    
    content = Text("‚úÖ –†–µ–∫—Ä—É—Ç–µ—Ä ", Bold(deleted_name), " (ID: ", Code(recruiter_id), ") —É–¥–∞–ª–µ–Ω.")
    await message.answer(**content.as_kwargs())