# hr_bot/tg_bot/handlers/common.py

import logging
import io
import pandas as pd
from datetime import date
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import CommandStart, Command
from sqlalchemy import func
from sqlalchemy.orm import Session
# --- –ü–†–ê–í–ò–õ–¨–ù–´–ô –ò–ú–ü–û–†–¢: –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–∏—à–Ω–µ–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä ---
from aiogram.utils.formatting import Text, Bold, Italic
from hr_bot.db.models import TelegramUser, Statistic, Vacancy, AppSettings
from hr_bot.tg_bot.keyboards import (
    user_keyboard, 
    admin_keyboard, 
    stats_period_keyboard, 
    create_stats_export_keyboard
)

logger = logging.getLogger(__name__)
router = Router()

def _build_stats_content(stats_query, period_text: str) -> Text:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ aiogram."""
    if not stats_query:
        return Text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ", Italic(period_text), " –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
    
    total_responses, total_dialogs, total_qualified = 0, 0, 0
    content_parts = [Bold(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {period_text}"), "\n\n"]
    
    for stat in stats_query:
        total_responses += stat.total_responses or 0
        total_dialogs += stat.total_dialogs or 0
        total_qualified += stat.total_qualified or 0
        
        # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Bold() —Å–∞–º –ø–æ–∑–∞–±–æ—Ç–∏—Ç—Å—è –æ–± —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        content_parts.extend([
            Bold(stat.title), ":\n",
            "  - –û—Ç–∫–ª–∏–∫–æ–≤: ", Bold(stat.total_responses or 0), "\n",
            "  - –î–∏–∞–ª–æ–≥–æ–≤: ", Bold(stat.total_dialogs or 0), "\n",
            "  - –ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: ", Bold(stat.total_qualified or 0), "\n\n"
        ])
    
    content_parts.extend([
        Bold("–ò—Ç–æ–≥–æ –ø–æ –≤—Å–µ–º –≤–∞–∫–∞–Ω—Å–∏—è–º:"), "\n",
        "  - –û—Ç–∫–ª–∏–∫–æ–≤: ", Bold(total_responses), "\n",
        "  - –î–∏–∞–ª–æ–≥–æ–≤: ", Bold(total_dialogs), "\n",
        "  - –ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: ", Bold(total_qualified)
    ])
    return Text(*content_parts)


@router.message(CommandStart())
async def handle_start(message: Message, db_session: Session):
    user_id = str(message.from_user.id)
    user = db_session.query(TelegramUser).filter(TelegramUser.telegram_id == user_id).first()
    if not user:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    if user.role == 'admin':
        keyboard = admin_keyboard
        role_name = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ‚ú®"
    else:
        keyboard = user_keyboard
        role_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üßë‚Äçüíª"
    
    # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Bold() —Å–∞–º –ø–æ–∑–∞–±–æ—Ç–∏—Ç—Å—è –æ–± —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    content = Text(
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ", Bold(message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"), "!\n\n",
        "–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è HR-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π.\n",
        Bold("–í–∞—à–∞ —Ä–æ–ª—å:"), f" {role_name}"
    )
    await message.answer(**content.as_kwargs(), reply_markup=keyboard)


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@router.message(Command("stats"))
async def handle_stats_command(message: Message, db_session: Session):
    if not db_session.query(TelegramUser).filter(TelegramUser.telegram_id == str(message.from_user.id)).first():
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=stats_period_keyboard)


@router.callback_query(F.data == "stats_today")
async def process_stats_today(callback: CallbackQuery, db_session: Session):
    today = date.today()
    stats_query = db_session.query(
        Vacancy.title,
        func.sum(Statistic.responses_count).label('total_responses'),
        func.sum(Statistic.started_dialogs_count).label('total_dialogs'),
        func.sum(Statistic.qualified_count).label('total_qualified')
    ).join(Statistic).filter(Statistic.date == today).group_by(Vacancy.title).all()
    content = _build_stats_content(stats_query, f"–∑–∞ {today.strftime('%d.%m.%Y')}")
    await callback.message.edit_text(**content.as_kwargs(), reply_markup=create_stats_export_keyboard(period="today"))
    await callback.answer()


@router.callback_query(F.data == "stats_all_time")
async def process_stats_all_time(callback: CallbackQuery, db_session: Session):
    stats_query = db_session.query(
        Vacancy.title,
        func.sum(Statistic.responses_count).label('total_responses'),
        func.sum(Statistic.started_dialogs_count).label('total_dialogs'),
        func.sum(Statistic.qualified_count).label('total_qualified')
    ).join(Statistic).group_by(Vacancy.title).all()
    content = _build_stats_content(stats_query, "–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è")
    await callback.message.edit_text(**content.as_kwargs(), reply_markup=create_stats_export_keyboard(period="all_time"))
    await callback.answer()


@router.callback_query(F.data.startswith("export_stats_"))
async def export_stats_to_excel(callback: CallbackQuery, db_session: Session):
    await callback.answer("–ì–æ—Ç–æ–≤–ª—é Excel-–æ—Ç—á–µ—Ç...", show_alert=False)
    period = callback.data.split("_")[-1]
    today = date.today()
    query_builder = db_session.query(
        Vacancy.title.label('–í–∞–∫–∞–Ω—Å–∏—è'),
        func.sum(Statistic.responses_count).label('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤'),
        func.sum(Statistic.started_dialogs_count).label('–ù–∞—á–∞—Ç–æ –¥–∏–∞–ª–æ–≥–æ–≤'),
        func.sum(Statistic.qualified_count).label('–ü—Ä–æ—à–ª–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é')
    ).join(Statistic)
    if period == "today":
        query_builder = query_builder.filter(Statistic.date == today)
        filename = f"hr_stats_{today.strftime('%Y-%m-%d')}.xlsx"
    else:
        filename = "hr_stats_all_time.xlsx"
    stats_data = query_builder.group_by(Vacancy.title).all()
    if not stats_data:
        await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return
    df = pd.DataFrame(stats_data)
    output_buffer = io.BytesIO()
    df.to_excel(output_buffer, index=False, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    output_buffer.seek(0)
    file_to_send = BufferedInputFile(output_buffer.read(), filename=filename)
    
    # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Italic() —Å–∞–º –ø–æ–∑–∞–±–æ—Ç–∏—Ç—Å—è –æ–± —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤ '_' –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    content = Text("–í–∞—à –æ—Ç—á–µ—Ç ", Italic(filename))
    await callback.message.answer_document(file_to_send, **content.as_kwargs())


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
@router.message(Command("help"))
async def handle_help(message: Message, db_session: Session):
    user = db_session.query(TelegramUser).filter(TelegramUser.telegram_id == str(message.from_user.id)).first()
    if not user: return
    if user.role == 'admin':
        help_text = (
            "*–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n"
            "–ö–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É:\n"
            "‚Ä¢ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
            "‚Ä¢ *–õ–∏–º–∏—Ç—ã –∏ –¢–∞—Ä–∏—Ñ* - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏.\n"
            "‚Ä¢ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏* - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞.\n"
            "‚Ä¢ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏* - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π hh.ru.\n"
            "‚Ä¢ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞–º–∏* - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–≤ hh.ru –∏ –∏—Ö —Ç–æ–∫–µ–Ω–æ–≤."
        )
    else:
        help_text = (
            "*–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n\n"
            "‚Ä¢ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è.\n"
            "‚Ä¢ *–õ–∏–º–∏—Ç—ã* - –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ª–∏–º–∏—Ç–æ–≤.\n\n"
            "–í–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö."
        )
    # help_text –±–µ–∑–æ–ø–∞—Å–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    await message.answer(help_text)