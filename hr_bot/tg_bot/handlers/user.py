# hr_bot/tg_bot/handlers/user.py

from aiogram import Router, F
from aiogram.types import Message
from sqlalchemy.orm import Session
from aiogram.utils.formatting import Text, Bold

from hr_bot.db.models import AppSettings
from hr_bot.tg_bot.filters import AdminFilter

router = Router()
router.message.filter(~AdminFilter()) # –°—Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∞–¥–º–∏–Ω

@router.message(F.text == "‚öôÔ∏è –õ–∏–º–∏—Ç—ã")
async def user_limits_status(message: Message, db_session: Session):
    settings = db_session.query(AppSettings).filter_by(id=1).first()
    if not settings:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤.")
        return
        
    remaining = settings.limit_total - settings.limit_used
    cost = settings.limit_used * settings.cost_per_response
    
    content = Text(
        Bold("üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:"), "\n\n",
        "–õ–∏–º–∏—Ç: ", Bold(settings.limit_total), " –æ—Ç–∫–ª–∏–∫–æ–≤\n",
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ", Bold(settings.limit_used), " (–Ω–∞ —Å—É–º–º—É: ", Bold(f"{cost:.2f}"), " —Ä—É–±.)\n",
        "–û—Å—Ç–∞–ª–æ—Å—å: ", Bold(remaining), "\n\n",
        "–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: ", Bold(f"{settings.cost_per_response:.2f}"), " —Ä—É–±. –∑–∞ –æ—Ç–∫–ª–∏–∫"
    )
    
    await message.answer(**content.as_kwargs())